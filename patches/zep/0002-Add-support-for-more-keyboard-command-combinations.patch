From 8c08aa2156cd0f6b52ca0063f748dd80f159fb65 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jozef=20=C4=8C=C3=AD=C5=BE?= <jozef.ciz.ml@gmail.com>
Date: Tue, 12 Apr 2022 22:34:57 +0200
Subject: [PATCH] Add support for more keyboard command combinations

---
 include/zep/imgui/editor_imgui.h | 86 ++++++++++++++------------------
 src/mode.cpp                     | 14 +++---
 2 files changed, 44 insertions(+), 56 deletions(-)

diff --git a/include/zep/imgui/editor_imgui.h b/include/zep/imgui/editor_imgui.h
index fe3b3a62..69498dbf 100644
--- a/include/zep/imgui/editor_imgui.h
+++ b/include/zep/imgui/editor_imgui.h
@@ -2,6 +2,7 @@
 #include <string>
 
 #include "zep/imgui/display_imgui.h"
+#include "zep/imgui/usb_hid_keys.h"
 
 #include "zep/editor.h"
 #include "zep/mode_standard.h"
@@ -13,37 +14,6 @@
 namespace Zep
 {
 
-// These key defines from usb_hid_keys.h; standard USB keycodes.
-// Defined here to stop collisions.
-
-#define ZEP_KEY_F1 0x3a // Keyboard F1
-#define ZEP_KEY_F2 0x3b // Keyboard F2
-#define ZEP_KEY_F3 0x3c // Keyboard F3
-#define ZEP_KEY_F4 0x3d // Keyboard F4
-#define ZEP_KEY_F5 0x3e // Keyboard F5
-#define ZEP_KEY_F6 0x3f // Keyboard F6
-#define ZEP_KEY_F7 0x40 // Keyboard F7
-#define ZEP_KEY_F8 0x41 // Keyboard F8
-#define ZEP_KEY_F9 0x42 // Keyboard F9
-#define ZEP_KEY_F10 0x43 // Keyboard F10
-#define ZEP_KEY_F11 0x44 // Keyboard F11
-#define ZEP_KEY_F12 0x45 // Keyboard F12
-
-#define ZEP_KEY_1 0x1e // Keyboard 1 and !
-#define ZEP_KEY_2 0x1f // Keyboard 2 and @
-#define ZEP_KEY_3 0x20 // Keyboard 3 and #
-#define ZEP_KEY_4 0x21 // Keyboard 4 and $
-#define ZEP_KEY_5 0x22 // Keyboard 5 and %
-#define ZEP_KEY_6 0x23 // Keyboard 6 and ^
-#define ZEP_KEY_7 0x24 // Keyboard 7 and &
-#define ZEP_KEY_8 0x25 // Keyboard 8 and *
-#define ZEP_KEY_9 0x26 // Keyboard 9 and (
-#define ZEP_KEY_0 0x27 // Keyboard 0 and )
-
-#define ZEP_KEY_A 0x04 // Keyboard a and A
-#define ZEP_KEY_Z 0x1d // Keyboard z and Z
-#define ZEP_KEY_SPACE 0x2c // Keyboard Spacebar
-
 class ZepDisplay_ImGui;
 class ZepTabWindow;
 class ZepEditor_ImGui : public ZepEditor
@@ -64,18 +34,18 @@ public:
 
         static std::map<int, int> MapUSBKeys =
         {
-            { ZEP_KEY_F1, ExtKeys::F1},
-            { ZEP_KEY_F2, ExtKeys::F2},
-            { ZEP_KEY_F3, ExtKeys::F3},
-            { ZEP_KEY_F4, ExtKeys::F4},
-            { ZEP_KEY_F5, ExtKeys::F5},
-            { ZEP_KEY_F6, ExtKeys::F6},
-            { ZEP_KEY_F7, ExtKeys::F7},
-            { ZEP_KEY_F8, ExtKeys::F8},
-            { ZEP_KEY_F9, ExtKeys::F9},
-            { ZEP_KEY_F10, ExtKeys::F10},
-            { ZEP_KEY_F11, ExtKeys::F11},
-            { ZEP_KEY_F12, ExtKeys::F12}
+            { KEY_F1, ExtKeys::F1},
+            { KEY_F2, ExtKeys::F2},
+            { KEY_F3, ExtKeys::F3},
+            { KEY_F4, ExtKeys::F4},
+            { KEY_F5, ExtKeys::F5},
+            { KEY_F6, ExtKeys::F6},
+            { KEY_F7, ExtKeys::F7},
+            { KEY_F8, ExtKeys::F8},
+            { KEY_F9, ExtKeys::F9},
+            { KEY_F10, ExtKeys::F10},
+            { KEY_F11, ExtKeys::F11},
+            { KEY_F12, ExtKeys::F12}
         };
         if (io.MouseDelta.x != 0 || io.MouseDelta.y != 0)
         {
@@ -211,28 +181,38 @@ public:
             // without modifying the ImGui base code, we have special handling here for CTRL.
             // For the Win32 case, we use VK_A (ASCII) is handled below
 #if defined(_SDL_H) || defined(ZEP_USE_SDL)
-            if (ImGui::IsKeyPressed(ZEP_KEY_1))
+            if (ImGui::IsKeyPressed(KEY_1))
             {
                 SetGlobalMode(ZepMode_Standard::StaticName());
                 handled = true;
             }
-            else if (ImGui::IsKeyPressed(ZEP_KEY_2))
+            else if (ImGui::IsKeyPressed(KEY_2))
             {
                 SetGlobalMode(ZepMode_Vim::StaticName());
                 handled = true;
             }
             else
             {
-                for (int ch = ZEP_KEY_A; ch <= ZEP_KEY_Z; ch++)
+                for (int ch = KEY_1; ch <= KEY_0; ch++)
+                {
+                    if (ImGui::IsKeyPressed(ch))
+                    {
+                        buffer.GetMode()->AddKeyPress(
+                            ch == KEY_0 ? '0' : ch - KEY_1 + '1', mod
+                        );
+                        handled = true;
+                    }
+                }
+                for (int ch = KEY_A; ch <= KEY_Z; ch++)
                 {
                     if (ImGui::IsKeyPressed(ch))
                     {
-                        buffer.GetMode()->AddKeyPress((ch - ZEP_KEY_A) + 'a', mod);
+                        buffer.GetMode()->AddKeyPress((ch - KEY_A) + 'a', mod);
                         handled = true;
                     }
                 }
 
-                if (ImGui::IsKeyPressed(ZEP_KEY_SPACE))
+                if (ImGui::IsKeyPressed(KEY_SPACE))
                 {
                     buffer.GetMode()->AddKeyPress(' ', mod);
                     handled = true;
@@ -251,6 +231,14 @@ public:
             }
             else
             {
+                for (int ch = '0'; ch <= '9'; ch++)
+                {
+                    if (ImGui::IsKeyPressed(ch))
+                    {
+                        buffer.GetMode()->AddKeyPress(ch, mod);
+                        handled = true;
+                    }
+                }
                 for (int ch = 'A'; ch <= 'Z'; ch++)
                 {
                     if (ImGui::IsKeyPressed(ch))
@@ -260,7 +248,7 @@ public:
                     }
                 }
 
-                if (ImGui::IsKeyPressed(ZEP_KEY_SPACE))
+                if (ImGui::IsKeyPressed(KEY_SPACE))
                 {
                     buffer.GetMode()->AddKeyPress(' ', mod);
                     handled = true;
diff --git a/src/mode.cpp b/src/mode.cpp
index 73d742df..588a7d1a 100644
--- a/src/mode.cpp
+++ b/src/mode.cpp
@@ -288,13 +288,13 @@ std::string ZepMode::ConvertInputToMapString(uint32_t key, uint32_t modifierKeys
         str << "<C-";
         if (modifierKeys & ModifierKey::Shift)
         {
-            // Add the S- modifier for shift enabled special keys
-            // We want to avoid adding S- to capitalized (and already shifted)
-            // keys
-            if (key < ' ')
-            {
+            // // Add the S- modifier for shift enabled special keys
+            // // We want to avoid adding S- to capitalized (and already shifted)
+            // // keys
+            // if (key < ' ')
+            // {
                 str << "S-";
-            }
+            // }
         }
         closeBracket = true;
     }
@@ -377,7 +377,7 @@ void ZepMode::AddKeyPress(uint32_t key, uint32_t modifierKeys)
     key &= 0xFF;
 
     // Keys in this range converted to UTF8.  I need to figure out how to generically receive UTF8 here, but this
-    // temporary fix enables £-sign and other specials to display and work correctly
+    // temporary fix enables ï¿½-sign and other specials to display and work correctly
     if (key >= 127 && key <= 255)
     {
 
-- 
2.36.0

