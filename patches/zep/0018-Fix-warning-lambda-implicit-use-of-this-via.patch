From 25d34ed99fa1209d2d19dc029ba69b4d61eeb7a8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jozef=20=C4=8C=C3=AD=C5=BE?= <jozef.ciz.ml@gmail.com>
Date: Wed, 8 Mar 2023 22:10:57 +0100
Subject: [PATCH] Fix warning lambda implicit use of this via =

---
 src/indexer.cpp       | 2 +-
 src/mode.cpp          | 2 +-
 src/range_markers.cpp | 4 ++--
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/indexer.cpp b/src/indexer.cpp
index 822c47dd..7eeb7ee0 100644
--- a/src/indexer.cpp
+++ b/src/indexer.cpp
@@ -230,7 +230,7 @@ void Indexer::Notify(std::shared_ptr<ZepMessage> message)
 
 void Indexer::StartSymbolSearch()
 {
-    GetEditor().GetThreadPool().enqueue([=]() {
+    GetEditor().GetThreadPool().enqueue([=, this]() {
         for (;;)
         {
             ZepPath path;
diff --git a/src/mode.cpp b/src/mode.cpp
index b1af43e6..cd5588b7 100644
--- a/src/mode.cpp
+++ b/src/mode.cpp
@@ -435,7 +435,7 @@ void ZepMode::HandleMappedInput(const std::string& input)
     }
 
     // A lambda to check for a pending mode switch after the command
-    auto enteringMode = [=](auto mode) {
+    auto enteringMode = [=, this](auto mode) {
         if (m_currentMode != spContext->commandResult.modeSwitch && spContext->commandResult.modeSwitch == mode)
         {
             return true;
diff --git a/src/range_markers.cpp b/src/range_markers.cpp
index 399c9e20..13918594 100644
--- a/src/range_markers.cpp
+++ b/src/range_markers.cpp
@@ -8,10 +8,10 @@ namespace Zep
 RangeMarker::RangeMarker(ZepBuffer& buffer)
     : m_buffer(buffer)
 {
-    onPreBufferInsert = buffer.sigPreInsert.connect([=](ZepBuffer& buffer, const GlyphIterator& itrStart, const std::string& str) {
+    onPreBufferInsert = buffer.sigPreInsert.connect([=, this](ZepBuffer& buffer, const GlyphIterator& itrStart, const std::string& str) {
         HandleBufferInsert(buffer, itrStart, str);
     });
-    onPreBufferDelete = buffer.sigPreDelete.connect([=](ZepBuffer& buffer, const GlyphIterator& itrStart, const GlyphIterator itrEnd) {
+    onPreBufferDelete = buffer.sigPreDelete.connect([=, this](ZepBuffer& buffer, const GlyphIterator& itrStart, const GlyphIterator itrEnd) {
         HandleBufferDelete(buffer, itrStart, itrEnd);
     });
 }
-- 
2.39.2

